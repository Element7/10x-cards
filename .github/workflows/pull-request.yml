name: Pull Request Workflow

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Cache ESLint results
        uses: actions/cache@v4
        with:
          path: .eslintcache
          key: ${{ runner.os }}-eslint-v9-${{ hashFiles('eslint.config.js', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-eslint-v9-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run linter
        run: npm run lint -- --max-warnings=0 --cache --cache-location=.eslintcache

      - name: Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: .eslintcache
          retention-days: 7

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint
    environment: integration
    env:
      PLAYWRIGHT_TEST_BASE_URL: ${{ secrets.PLAYWRIGHT_TEST_BASE_URL }}
      SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.TEST_SUPABASE_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  status-comment:
    name: PR Status Comment
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: ${{ always() }}
    permissions:
      pull-requests: write
    steps:
      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-test-coverage
          path: unit-coverage

      - name: Download Playwright test results
        uses: actions/download-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

      - name: Create PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Check all previous jobs status
            const allJobsSuccess = context.payload.workflow_run ? 
              context.payload.workflow_run.conclusion === 'success' : 
              ${{ needs.unit-tests.result == 'success' && needs.e2e-tests.result == 'success' }};

            let unitCoverageSummary = 'No unit test coverage data available';
            try {
              if (fs.existsSync('./unit-coverage/coverage-summary.json')) {
                const unitCoverage = JSON.parse(fs.readFileSync('./unit-coverage/coverage-summary.json', 'utf8'));
                const total = unitCoverage.total;
                unitCoverageSummary = `
                | Type | Percentage |
                | ---- | ---------- |
                | Lines | ${total.lines.pct}% |
                | Statements | ${total.statements.pct}% |
                | Functions | ${total.functions.pct}% |
                | Branches | ${total.branches.pct}% |
                `;
              }
            } catch (error) {
              console.error('Error reading unit test coverage:', error);
            }

            const statusIcon = allJobsSuccess ? '✅' : '❌';
            const statusMessage = allJobsSuccess ? 'All checks passed!' : 'Some checks failed. Please check the details.';

            const comment = `## Pull Request Status ${statusIcon}

            ${statusMessage}

            ### Unit Test Coverage

            ${unitCoverageSummary}

            ### E2E Tests

            [View detailed Playwright report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})

            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
